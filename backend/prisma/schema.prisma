// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Category {
  POLITICA
  ESPORTES
  TECNOLOGIA
  EDUCAÇÃO
  OUTROS
}

enum VoteStatus {
  AGUARDANDO
  APROVADO
  EMPATE
  RECUSADO
}

model Agenda {
  id           String   @id @default(uuid())
  title        String
  description  String
  category     Category
  iniVoteDate  DateTime @map("ini_vote_date") 
  iniVoteTime  Int @map("ini_vote_time")
  status       VoteStatus
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  voteSession  VoteSession?

  @@map("agenda")
}

model VoteSession {
  id        String   @id @default(uuid())
  agendaId  String   @unique @map("agenda_id") 
  startedAT DateTime @default(now()) @map("started_at")
  endedAt   DateTime @map("ended_at")
  agenda    Agenda   @relation(fields: [agendaId], references: [id])
  totalVotes Int      @default(0) @map("total_votes")

  votes     Vote[]

  @@map("vote_sessions")
}

model Vote {
  id            String      @id @default(uuid())
  voteSessionId String @map("vote_sessions_id")
  cpf           String
  vote          Boolean     
  createdAt    DateTime @default(now()) @map("created_at")
  voteSession   VoteSession @relation(fields: [voteSessionId], references: [id])

  @@unique([cpf, voteSessionId]) // garante que o mesmo CPF só vote uma vez por sessão
  @@map("votes")
}